class CapabilitiesController { constructor() { this.animationFrame = null; this.constellationTime = 0; this.init(); } init() { this.createDetailedStarField(); this.startConstellationDynamics(); } createDetailedStarField() { const starsContainer = document.querySelector('.constellation-stars'); if (!starsContainer) return; starsContainer.innerHTML = ''; for (let i = 0; i < 120; i++) { const star = this.createDetailedStar(i); starsContainer.appendChild(star); } setTimeout(() => this.createConstellationConnections(starsContainer), 500); } createDetailedStar(index) { const star = document.createElement('div'); star.className = 'dynamic-star enhanced-star'; const baseSize = (Math.random() * 2.5 + 0.8) * 0.6; const intensity = Math.random(); const starClass = this.getStarClass(intensity); const x = Math.random() * 100; const y = Math.random() * 100; const delay = Math.random() * 8; const duration = Math.random() * 4 + 3; star.style.cssText = `position:absolute;left:${x}%;top:${y}%;width:${baseSize}px;height:${baseSize}px;background:${this.getDetailedStarColor(intensity)};border-radius:50%;box-shadow:0 0 ${baseSize * 4}px currentColor,0 0 ${baseSize * 8}px rgba(255,255,255,0.2),0 0 ${baseSize * 12}px rgba(0,255,255,0.1),inset 0 0 ${baseSize * 0.8}px rgba(255,255,255,0.9);animation:${starClass.animation} ${duration}s ease-in-out infinite;animation-delay:${delay}s;filter:brightness(${0.7 + intensity * 0.5}) saturate(${0.8 + intensity * 0.4});z-index:${Math.floor(intensity * 5) + 1};transform-origin:center;`; if (intensity > 0.7) { this.addStarSpikes(star, baseSize, intensity); } if (intensity > 0.85) { this.addPulsingRing(star, baseSize); } return star; } addStarSpikes(star, size, intensity) { const spikes = 4; for (let i = 0; i < spikes; i++) { const spike = document.createElement('div'); const angle = (360 / spikes) * i; spike.style.cssText = `position:absolute;top:50%;left:50%;width:${size * 12}px;height:1px;background:linear-gradient(90deg,transparent 0%,currentColor 45%,currentColor 55%,transparent 100%);transform:translate(-50%,-50%) rotate(${angle}deg);animation:starSpike ${3 + Math.random() * 2}s ease-in-out infinite;animation-delay:${Math.random() * 2}s;opacity:${intensity * 0.8};`; star.appendChild(spike); } } addPulsingRing(star, size) { const ring = document.createElement('div'); ring.style.cssText = `position:absolute;top:50%;left:50%;width:${size * 6}px;height:${size * 6}px;border:1px solid currentColor;border-radius:50%;transform:translate(-50%,-50%);animation:starRingPulse ${4 + Math.random() * 3}s ease-in-out infinite;opacity:0.4;`; star.appendChild(ring); } createConstellationConnections(container) { const peacockStars = container.querySelectorAll('.peacock-constellation-star'); const regularStars = container.querySelectorAll('.dynamic-star'); for (let i = 0; i < peacockStars.length - 1; i++) { if (Math.random() > 0.4) { this.createStarConnection(peacockStars[i], peacockStars[i + 1], container, 'peacock'); } } const nearbyPairs = this.findNearbyStars(Array.from(regularStars), 20); nearbyPairs.forEach(pair => { if (Math.random() > 0.7) { this.createStarConnection(pair[0], pair[1], container, 'regular'); } }); } findNearbyStars(stars, maxDistance) { const pairs = []; for (let i = 0; i < stars.length; i++) { for (let j = i + 1; j < stars.length; j++) { const star1 = stars[i]; const star2 = stars[j]; const x1 = parseFloat(star1.style.left); const y1 = parseFloat(star1.style.top); const x2 = parseFloat(star2.style.left); const y2 = parseFloat(star2.style.top); const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2); if (distance < maxDistance) { pairs.push([star1, star2]); } } } return pairs.slice(0, 15); } createStarConnection(star1, star2, container, type) { const x1 = parseFloat(star1.style.left); const y1 = parseFloat(star1.style.top); const x2 = parseFloat(star2.style.left); const y2 = parseFloat(star2.style.top); const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2); const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI; const line = document.createElement('div'); line.className = `constellation-line ${type}-line`; const opacity = type === 'peacock' ? 0.4 : 0.2; const color = type === 'peacock' ? 'rgba(0,255,255,0.6)' : 'rgba(138,43,226,0.3)'; line.style.cssText = `position:absolute;left:${x1}%;top:${y1}%;width:${distance}%;height:1px;background:linear-gradient(90deg,transparent 0%,${color} 20%,${color} 80%,transparent 100%);transform-origin:0 50%;transform:rotate(${angle}deg);animation:constellationLineGlow ${8 + Math.random() * 4}s ease-in-out infinite;animation-delay:${Math.random() * 3}s;opacity:${opacity};z-index:0;`; container.appendChild(line); } getStarClass(intensity) { if (intensity < 0.3) return { animation: 'starDimTwinkle', type: 'dim' }; if (intensity < 0.6) return { animation: 'starNormalTwinkle', type: 'normal' }; if (intensity < 0.8) return { animation: 'starBrightPulse', type: 'bright' }; return { animation: 'starBrilliantSparkle', type: 'brilliant' }; } getDetailedStarColor(intensity) { const colors = ['#ffffff', '#f0f8ff', '#e6f3ff', '#00ffff', '#40e0d0', '#00ced1', '#8a2be2', '#9370db', '#ba55d3', '#4169e1', '#6495ed', '#87ceeb', '#ffd700', '#ffff00', '#ffffe0', '#ff69b4', '#ff1493', '#dc143c']; const colorIndex = Math.floor(intensity * colors.length); return colors[colorIndex] || colors[0]; } startConstellationDynamics() { const animate = () => { this.constellationTime += 0.008; const feather = document.querySelector('.peacock-feather-constellation'); if (feather) { const breathe = Math.sin(this.constellationTime * 0.5) * 0.04 + 1; const reducedScale = 0.8; feather.style.transform = `translate(-50%, -50%) scale(${breathe * reducedScale})`; } this.animationFrame = requestAnimationFrame(animate); }; animate(); } animateConnections() { const lines = document.querySelectorAll('.constellation-line'); lines.forEach((line, index) => { const wave = Math.sin(this.constellationTime * 2 + index * 0.5) * 0.1 + 1; line.style.opacity = parseFloat(line.style.opacity || 0.2) * wave; }); } setupAdvancedScrollAnimations() { const observerOptions = { threshold: [0, 0.1, 0.3, 0.6, 1], rootMargin: '-50px 0px -50px 0px' }; const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { const progress = entry.intersectionRatio; if (entry.isIntersecting) { entry.target.classList.add('visible'); this.triggerAdvancedWidgetAnimation(entry.target, progress); } }); }, observerOptions); document.querySelectorAll('.stellar-widget, .stellar-card').forEach(element => { observer.observe(element); }); } triggerAdvancedWidgetAnimation(widget, progress) { const elements = { icon: widget.querySelector('.widget-icon, .advanced-icon'), title: widget.querySelector('h3, h4'), listItems: widget.querySelectorAll('.capability-list li'), glow: widget.querySelector('.widget-glow') }; if (elements.icon) { setTimeout(() => { elements.icon.style.animation = 'iconBounceIn 1s cubic-bezier(0.68, -0.55, 0.265, 1.55)'; }, 100); } if (elements.title) { setTimeout(() => { this.typewriterEffect(elements.title); }, 300); } elements.listItems.forEach((item, index) => { setTimeout(() => { item.style.animation = `slideInLeftBounce 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards`; this.addItemSparkle(item); }, 500 + index * 150); }); if (elements.glow) { setTimeout(() => { elements.glow.style.animation = 'glowPulse 3s ease-in-out infinite'; }, 200); } } typewriterEffect(element) { const text = element.textContent; element.textContent = ''; element.style.borderRight = '2px solid #00ffff'; let i = 0; const typeInterval = setInterval(() => { element.textContent += text[i]; i++; if (i >= text.length) { clearInterval(typeInterval); setTimeout(() => { element.style.borderRight = 'none'; }, 1000); } }, 50); } addItemSparkle(item) { for (let i = 0; i < 3; i++) { setTimeout(() => { const sparkle = document.createElement('div'); sparkle.className = 'item-sparkle'; sparkle.style.cssText = `position:absolute;left:${Math.random() * 20}px;top:${Math.random() * item.offsetHeight}px;width:3px;height:3px;background:#00ffff;border-radius:50%;pointer-events:none;animation:sparkleOut 1.5s ease-out forwards;z-index:100;`; item.appendChild(sparkle); setTimeout(() => sparkle.remove(), 1500); }, i * 200); } } setupEnhancedInteractions() { document.querySelectorAll('.capability-widget').forEach(widget => { widget.addEventListener('mouseenter', e => { this.createAdvancedRipple(widget, e); this.enhanceWidgetEffects(widget); this.createFloatingParticles(widget); }); widget.addEventListener('mouseleave', () => { this.resetWidgetEffects(widget); }); widget.addEventListener('click', () => { this.createClickExplosion(widget); }); }); } createAdvancedRipple(element, event) { const rect = element.getBoundingClientRect(); const x = event.clientX - rect.left; const y = event.clientY - rect.top; const ripple = document.createElement('div'); ripple.className = 'advanced-ripple'; ripple.style.cssText = `position:absolute;left:${x}px;top:${y}px;width:0;height:0;border-radius:50%;background:radial-gradient(circle,rgba(0,255,255,0.3) 0%,rgba(138,43,226,0.2) 50%,transparent 70%);transform:translate(-50%,-50%);animation:advancedRippleExpand 1.2s ease-out forwards;pointer-events:none;z-index:5;`; element.appendChild(ripple); setTimeout(() => ripple.remove(), 1200); } createFloatingParticles(element) { for (let i = 0; i < 8; i++) { setTimeout(() => { const particle = document.createElement('div'); particle.className = 'floating-particle'; const size = Math.random() * 4 + 2; const x = Math.random() * element.offsetWidth; const y = element.offsetHeight; particle.style.cssText = `position:absolute;left:${x}px;top:${y}px;width:${size}px;height:${size}px;background:${Math.random() > 0.5 ? '#00ffff' : '#8a2be2'};border-radius:50%;pointer-events:none;animation:floatUp ${2 + Math.random() * 2}s ease-out forwards;z-index:10;`; element.appendChild(particle); setTimeout(() => particle.remove(), 4000); }, i * 100); } } createClickExplosion(element) { for (let i = 0; i < 12; i++) { const explosion = document.createElement('div'); explosion.className = 'click-explosion'; const angle = (360 / 12) * i; const distance = 50 + Math.random() * 30; explosion.style.cssText = `position:absolute;top:50%;left:50%;width:4px;height:4px;background:#00ffff;border-radius:50%;transform:translate(-50%,-50%);animation:explodeOut ${1 + Math.random() * 0.5}s ease-out forwards;--angle:${angle}deg;--distance:${distance}px;z-index:20;`; element.appendChild(explosion); setTimeout(() => explosion.remove(), 1500); } } enhanceWidgetEffects(widget) { const glow = widget.querySelector('.widget-glow'); if (glow) { glow.style.opacity = '1'; glow.style.background = `radial-gradient(circle at center,rgba(0,255,255,0.3) 0%,transparent 70%),conic-gradient(from 0deg,rgba(0,255,255,0.1),rgba(138,43,226,0.1),rgba(0,255,255,0.1))`; glow.style.animation = 'rotateGlow 4s linear infinite'; } } resetWidgetEffects(widget) { const glow = widget.querySelector('.widget-glow'); if (glow) { glow.style.animation = 'none'; glow.style.background = 'linear-gradient(45deg,rgba(0,255,255,0.1),transparent,rgba(138,43,226,0.1))'; } } destroy() { if (this.animationFrame) { cancelAnimationFrame(this.animationFrame); } } } class MobileMenuController { constructor() { this.hamburger = document.querySelector('.hamburger-stellar'); this.navMenu = document.querySelector('.nav-menu-stellar'); this.isOpen = false; this.init(); } init() { if (this.hamburger && this.navMenu) { this.hamburger.addEventListener('click', () => this.toggleMenu()); this.navMenu.querySelectorAll('a').forEach(link => { link.addEventListener('click', () => this.closeMenu()); }); document.addEventListener('click', e => { if (this.isOpen && !this.navMenu.contains(e.target) && !this.hamburger.contains(e.target)) { this.closeMenu(); } }); } } toggleMenu() { this.isOpen = !this.isOpen; this.navMenu.classList.toggle('active'); this.hamburger.classList.toggle('active'); if (this.isOpen) { this.animateMenuItems(); } } animateMenuItems() { const items = this.navMenu.querySelectorAll('li'); items.forEach((item, index) => { item.style.animation = `slideInRight 0.3s ease-out forwards`; item.style.animationDelay = `${index * 0.1}s`; }); } closeMenu() { this.isOpen = false; this.navMenu.classList.remove('active'); this.hamburger.classList.remove('active'); } } class ParallaxController { constructor() { this.elements = {}; this.ticking = false; this.init(); } init() { this.elements = { feather: document.querySelector('.peacock-feather-constellation'), stars: document.querySelector('.constellation-stars'), particles: document.querySelector('.cosmic-particles') }; window.addEventListener('scroll', () => this.requestTick()); } requestTick() { if (!this.ticking) { requestAnimationFrame(() => this.updateParallax()); this.ticking = true; } } updateParallax() { const scrolled = window.pageYOffset; const rate = scrolled * -0.3; if (this.elements.feather) { this.elements.feather.style.transform += ` translateY(${rate * 0.4}px)`; } if (this.elements.stars) { this.elements.stars.style.transform = `translateY(${rate * 0.3}px) rotateZ(${scrolled * 0.01}deg)`; } if (this.elements.particles) { this.elements.particles.style.transform = `translateY(${rate * 0.15}px) translateX(${Math.sin(scrolled * 0.001) * 10}px)`; } this.ticking = false; } } const enhancedAnimationStyles = document.createElement('style'); enhancedAnimationStyles.textContent = `@keyframes starDimTwinkle{0%,100%{opacity:0.4;transform:scale(0.8);}50%{opacity:0.7;transform:scale(1);}}@keyframes starNormalTwinkle{0%,100%{opacity:0.6;transform:scale(1);filter:brightness(0.8);}25%{opacity:0.3;transform:scale(0.85);filter:brightness(0.6);}50%{opacity:1;transform:scale(1.15);filter:brightness(1.2);}75%{opacity:0.8;transform:scale(0.95);filter:brightness(0.9);}}@keyframes starBrightPulse{0%,100%{opacity:0.8;transform:scale(1);box-shadow:0 0 8px currentColor;}50%{opacity:1;transform:scale(1.25);box-shadow:0 0 16px currentColor,0 0 32px rgba(255,255,255,0.3);}}@keyframes starBrilliantSparkle{0%,100%{opacity:0.9;transform:scale(1) rotate(0deg);filter:brightness(1.2) saturate(1.1);}33%{opacity:1;transform:scale(1.4) rotate(120deg);filter:brightness(1.8) saturate(1.5);}66%{opacity:0.7;transform:scale(0.8) rotate(240deg);filter:brightness(1) saturate(0.9);}}@keyframes starSpike{0%,100%{opacity:0.3;transform:translate(-50%,-50%) rotate(var(--rotation,0deg)) scaleX(0.8);}50%{opacity:0.8;transform:translate(-50%,-50%) rotate(var(--rotation,0deg)) scaleX(1.2);}}@keyframes starRingPulse{0%,100%{opacity:0.2;transform:translate(-50%,-50%) scale(0.8);}50%{opacity:0.6;transform:translate(-50%,-50%) scale(1.5);}}@keyframes peacockStarGlow{0%,100%{opacity:0.8;filter:brightness(1) hue-rotate(0deg);}50%{opacity:1;filter:brightness(1.5) hue-rotate(15deg);}}@keyframes constellationLineGlow{0%,100%{opacity:0.2;filter:brightness(1);}50%{opacity:0.6;filter:brightness(1.3);}}@keyframes iconBounceIn{0%{opacity:0;transform:scale(0.3) rotate(-45deg);}50%{opacity:1;transform:scale(1.2) rotate(10deg);}100%{opacity:1;transform:scale(1) rotate(0deg);}}@keyframes slideInLeftBounce{0%{opacity:0;transform:translateX(-50px) rotateY(-30deg);}60%{opacity:1;transform:translateX(10px) rotateY(5deg);}100%{opacity:1;transform:translateX(0) rotateY(0deg);}}@keyframes glowPulse{0%,100%{opacity:0.3;}50%{opacity:0.8;}}@keyframes rotateGlow{0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}}@keyframes sparkleOut{0%{opacity:1;transform:scale(0) rotate(0deg);}50%{opacity:1;transform:scale(1.2) rotate(180deg);}100%{opacity:0;transform:scale(0) rotate(360deg) translateY(-20px);}}@keyframes advancedRippleExpand{0%{width:0;height:0;opacity:0.8;}50%{opacity:0.4;}100%{width:400px;height:400px;opacity:0;}}@keyframes floatUp{0%{opacity:1;transform:translateY(0) scale(1);}100%{opacity:0;transform:translateY(-100px) scale(0.3);}}@keyframes explodeOut{0%{opacity:1;transform:translate(-50%,-50%) scale(1);}100%{opacity:0;transform:translate(-50%,-50%) translateX(calc(cos(var(--angle))*var(--distance))) translateY(calc(sin(var(--angle))*var(--distance))) scale(0.2);}}@keyframes slideInRight{0%{opacity:0;transform:translateX(30px);}100%{opacity:1;transform:translateX(0);}}`; document.head.appendChild(enhancedAnimationStyles); document.addEventListener('DOMContentLoaded', () => {const capabilities = new CapabilitiesController(); new MobileMenuController();new ParallaxController();document.querySelectorAll('.nav-menu-stellar a[href^="#"]').forEach(link => {link.addEventListener('click', e => {e.preventDefault();const target = document.querySelector(link.getAttribute('href'));if (target) {const headerOffset = 80;const elementPosition = target.getBoundingClientRect().top;const offsetPosition = elementPosition + window.pageYOffset - headerOffset;window.scrollTo({ top: offsetPosition, behavior: 'smooth' });} });});window.addEventListener('beforeunload', () => { capabilities.destroy(); });function downloadSRAC() {window.location.href = 'TC.html';}    document.querySelectorAll('.btn-download, .btn-download-stellar, .btn-download-cosmic, .btn-download-modern').forEach(button => { button.addEventListener('click', downloadSRAC);});});
